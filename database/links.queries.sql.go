// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: links.queries.sql

package sqlcservice

import (
	"context"
	"database/sql"
)

const deleteLink = `-- name: DeleteLink :exec
DELETE FROM
  link
WHERE
  id = ?
`

func (q *Queries) DeleteLink(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteLink, id)
	return err
}

const findLinkById = `-- name: FindLinkById :one
SELECT
  id,
  url,
  link_type_id,
  published
FROM
  link
WHERE
  id = ?
  AND user_id = ?
`

type FindLinkByIdParams struct {
	ID     int32
	UserID int32
}

type FindLinkByIdRow struct {
	ID         int32
	Url        string
	LinkTypeID int32
	Published  bool
}

func (q *Queries) FindLinkById(ctx context.Context, arg FindLinkByIdParams) (FindLinkByIdRow, error) {
	row := q.db.QueryRowContext(ctx, findLinkById, arg.ID, arg.UserID)
	var i FindLinkByIdRow
	err := row.Scan(
		&i.ID,
		&i.Url,
		&i.LinkTypeID,
		&i.Published,
	)
	return i, err
}

const insertLink = `-- name: InsertLink :execresult
INSERT INTO
  link (user_id, url, link_type_id, published)
VALUES
  (?, ?, ?, ?)
`

type InsertLinkParams struct {
	UserID     int32
	Url        string
	LinkTypeID int32
	Published  bool
}

func (q *Queries) InsertLink(ctx context.Context, arg InsertLinkParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, insertLink,
		arg.UserID,
		arg.Url,
		arg.LinkTypeID,
		arg.Published,
	)
}

const listLinkTypes = `-- name: ListLinkTypes :many
SELECT
  id,
  name
FROM
  link_type
`

type ListLinkTypesRow struct {
	ID   int32
	Name string
}

func (q *Queries) ListLinkTypes(ctx context.Context) ([]ListLinkTypesRow, error) {
	rows, err := q.db.QueryContext(ctx, listLinkTypes)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListLinkTypesRow
	for rows.Next() {
		var i ListLinkTypesRow
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listLinksForUser = `-- name: ListLinksForUser :many
SELECT
  l.id,
  l.url,
  l.link_type_id,
  l.published,
  lt.name AS link_type_name,
  lt.icon_class
FROM
  link l
  LEFT JOIN link_type lt ON l.link_type_id = lt.id
WHERE
  l.user_id = ?
`

type ListLinksForUserRow struct {
	ID           int32
	Url          string
	LinkTypeID   int32
	Published    bool
	LinkTypeName sql.NullString
	IconClass    sql.NullString
}

func (q *Queries) ListLinksForUser(ctx context.Context, userID int32) ([]ListLinksForUserRow, error) {
	rows, err := q.db.QueryContext(ctx, listLinksForUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListLinksForUserRow
	for rows.Next() {
		var i ListLinksForUserRow
		if err := rows.Scan(
			&i.ID,
			&i.Url,
			&i.LinkTypeID,
			&i.Published,
			&i.LinkTypeName,
			&i.IconClass,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listPublicLinksForUser = `-- name: ListPublicLinksForUser :many
SELECT
  l.id,
  l.url,
  l.link_type_id,
  lt.name AS link_type_name,
  lt.icon_class
FROM
  link l
  LEFT JOIN link_type lt ON l.link_type_id = lt.id
WHERE
  l.user_id = ?
AND
  l.published = 1
`

type ListPublicLinksForUserRow struct {
	ID           int32
	Url          string
	LinkTypeID   int32
	LinkTypeName sql.NullString
	IconClass    sql.NullString
}

func (q *Queries) ListPublicLinksForUser(ctx context.Context, userID int32) ([]ListPublicLinksForUserRow, error) {
	rows, err := q.db.QueryContext(ctx, listPublicLinksForUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListPublicLinksForUserRow
	for rows.Next() {
		var i ListPublicLinksForUserRow
		if err := rows.Scan(
			&i.ID,
			&i.Url,
			&i.LinkTypeID,
			&i.LinkTypeName,
			&i.IconClass,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateLink = `-- name: UpdateLink :exec
UPDATE
  link
SET
  url = ?,
  link_type_id = ?,
  published = ?
WHERE
  id = ?
`

type UpdateLinkParams struct {
	Url        string
	LinkTypeID int32
	Published  bool
	ID         int32
}

func (q *Queries) UpdateLink(ctx context.Context, arg UpdateLinkParams) error {
	_, err := q.db.ExecContext(ctx, updateLink,
		arg.Url,
		arg.LinkTypeID,
		arg.Published,
		arg.ID,
	)
	return err
}
